# -*- coding: utf-8 -*-
"""Farenheit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cVXVkwBweKGaKtdhk8j0rAxqZdvcWQvA

#**The First Model**

In this model we are going to convert degrees from Celsius to Fharenheit **in two different ways:**

1.   with a pure Pyhton function
2.   Tensorflow algorithm
"""

import tensorflow as tf
import numpy as np
from numpy import genfromtxt
import pandas as pd
import os
import matplotlib.pyplot as plt

"""$$ f = c \times 1.8 + 32 $$

##Python Function
"""

def model_tofar(c):
  f = (c*1.8)+32
  return f

model_tofar(1)

def model_tocel(f):
  c = (f-32)/1.8
  return c

model_tocel(3)



"""##TensorFlow

###Import Data from Pandas
"""

url = "https://raw.githubusercontent.com/milioe/datasets/master/degrees.csv"

data_pandas = pd.read_csv(url)

data_pandas.head()

"""###Import Data from os"""

data_os= os.path.join("User/Desktop", "degrees.csv")

data_os

"""###Import Data from Numpy"""

my_data = genfromtxt(url, delimiter=",", skip_header=1)

my_data

celsius_x = np.array(my_data[:,-1], dtype=float)

fahrenheit_y = np.array(my_data[:,0],dtype=float)

celsius_x

fahrenheit_y

for i,c in enumerate(celsius_x):
  print("{} degrees Fahrenheit = {} degrees Celsius".format(c, fahrenheit_y[i]))

"""###Training the model"""

l0 = tf.keras.layers.Dense(units=1, input_shape=[1])

model = tf.keras.Sequential([l0])

model.compile(loss='mean_squared_error',
              optimizer=tf.keras.optimizers.Adam(0.1))

history = model.fit(celsius_x, fahrenheit_y, epochs=500, verbose=False)
print("Finished training the model")


plt.xlabel('Epoch Number')
plt.ylabel("Loss Magnitude")
plt.plot(history.history['loss'])

print(model.predict([50.0]))

